version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: codenet-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-codenet}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - codenet-network

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: codenet-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/codenet?authSource=admin
      - MONGODB_DATABASE=codenet
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_JWT_ISSUER=${CLERK_JWT_ISSUER}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - MAX_FILE_SIZE=10MB
      - MAX_REQUEST_SIZE=50MB
      - UPLOAD_DIR=/app/uploads
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      - mongodb
    networks:
      - codenet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ballerina Webhook Service
  webhook-service:
    build:
      context: ./clerk_webhook_listener
      dockerfile: Dockerfile
    container_name: codenet-webhook
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - BACKEND_URL=http://backend:8080
      - CLERK_WEBHOOK_SECRET=${CLERK_WEBHOOK_SECRET}
    depends_on:
      - backend
    networks:
      - codenet-network

  # Nginx (for production frontend serving)
  nginx:
    image: nginx:alpine
    container_name: codenet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - codenet-network

volumes:
  mongodb_data:
    driver: local
  uploads_data:
    driver: local

networks:
  codenet-network:
    driver: bridge
